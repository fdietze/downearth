import scala.collection.mutable.{HashMap,MultiMap}
import math._


object CaseType extends Enumeration {
	type CaseType = Value
	val allPositive,oneNegative,threePositivesConnected,fourPositivesTwoTimesTwoConnected,
	twoPositivesOverTwoEdges,fourPositivesUnconnected,twoNegativesOverTwoEdges,
	twoNegativesOverThreeEdges,diagonalHalf,fourPositivesConnectedOnPlane,
	threeNegativesUnconnected,fourPositivesOneUnconnected,threePositivesUnconnected,
	twoNegativesConnected,threeNegativesConnected,allNegative,onePositive,
	twoPositivesOverThreeEdges,fourPositivesInLine,threeNegativesOneUnconnected,
	twoPositivesConnected,threePositivesOneUnconnected,broken = Value
}

import CaseType._

object Main{
	def isPowerOfTwo(x:Int) = (((x-1) & x) == 0) && x != 0
	def log2(x:Int) = (log(x)/log(2)).toInt
	def sameEdge(a:Int,b:Int) = isPowerOfTwo(a ^ b)
	def over2edges(a:Int,b:Int) = isPowerOfTwo((~(a^b)) & 7)

	def printcube(x:Int) = println("   %b---%b\n  /| / |\n%b---%b  |\n|  %b|--%b\n|/  |/\n%b---%b\n".format((x&(1<<6))>0,(x&(1<<7))>0,(x&(1<<4))>0,(x&(1<<5))>0,(x&(1<<2))>0,(x&(1<<3))>0,(x&(1<<0))>0,(x&(1<<1))>0).replace("true","X").replace("false","."))
	def printcubes(xs:collection.IterableLike[Int,Iterable[Int]]) { xs foreach(printcube _); println(for(x <- xs) yield "0x%H".format(x)) }
	def complements(xs:collection.IterableLike[Int,Iterable[Int]]) = for( x <- xs ) yield ~x&255

	
	val cases = new HashMap[CaseType,Set[Int]]// with MultiMap[String,Int]
	
	cases( allNegative ) = Set(0x00)
	cases( onePositive ) = Set(0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80);
	cases( twoPositivesConnected ) = Set(0x03, 0x0C, 0x30, 0xC0,  0x05, 0x0A, 0x50, 0xA0,  0x11, 0x22, 0x44, 0x88);
	cases( fourPositivesConnectedOnPlane ) = Set(0x0F, 0xF0, 0x33, 0xCC, 0x55, 0xAA);
	cases( twoPositivesOverTwoEdges ) = Set(0x09, 0x21, 0x41, 0x06, 0x12, 0x82, 0x14, 0x84, 0x28, 0x48, 0x90, 0x60);
	cases( twoPositivesOverThreeEdges ) = Set(0x81, 0x42, 0x24, 0x18);
	cases( threePositivesUnconnected ) = Set(0x29, 0x49, 0x61, 0x16, 0x86, 0x92, 0x94, 0x68);
	cases( fourPositivesUnconnected ) = Set(0x69, 0x96);
	cases( threePositivesConnected ) = Set(0xC4, 0x70, 0xC8, 0xD0, 0x2A, 0x15, 0x4C, 0x8C, 0x0D, 0x51, 0xA8, 0x07, 0x54, 0xE0, 0xB0, 0x0E, 0x0B, 0x8A, 0x13, 0x31, 0x23, 0xA2, 0x45, 0x32);
	cases( diagonalHalf ) = Set(0x17, 0xD4, 0xB2, 0x2B, 0x71, 0xE8, 0x4D, 0x8E);
	cases( threePositivesOneUnconnected ) = Set(0x52, 0x58, 0x62, 0xA1, 0x26, 0x98, 0xA4, 0x25, 0x1A, 0xC1, 0x89, 0x1C, 0x19, 0x91, 0x2C, 0x83, 0x64, 0x46, 0x38, 0x4A, 0xC2, 0x34, 0x43, 0x85);
	cases( fourPositivesInLine ) = Set(0xE2, 0xB1, 0x2E, 0xCA, 0x1D, 0xD8, 0x47, 0xD1, 0xE4, 0x5C, 0x8B, 0xB8, 0xA3, 0x35, 0x72, 0x4E, 0x1B, 0x27, 0x53, 0xC5, 0xAC, 0x3A, 0x74, 0x8D);
	cases( fourPositivesOneUnconnected ) = Set(0xA9, 0x1E, 0x39, 0x95, 0xE1, 0x59, 0x87, 0x36, 0x65, 0x2D, 0x56, 0x6A, 0x78, 0xD2, 0x9C, 0x4B, 0xC6, 0xB4, 0x6C, 0x93, 0xA6, 0x63, 0xC9, 0x9A);
	cases( threeNegativesConnected ) = Set(0x4F, 0x73, 0xD5, 0xEC, 0xCE, 0xAB, 0x3B, 0x37, 0xCD, 0x8F, 0x5D, 0xF2, 0xAE, 0xEA, 0xDC, 0x75, 0xF8, 0xF1, 0xBA, 0xF4, 0x57, 0xB3, 0x2F, 0x1F);
	cases( fourPositivesTwoTimesTwoConnected ) = Set(0x99, 0xC3, 0x66, 0xA5, 0x5A, 0x3C);
	cases( threeNegativesOneUnconnected ) = Set(0x5E, 0x6E, 0xDA, 0xBC, 0x9D, 0xE5, 0xC7, 0x76, 0xB5, 0xE6, 0x3E, 0xB9, 0x67, 0xA7, 0xAD, 0xCB, 0x7A, 0x3D, 0x5B, 0x7C, 0x9B, 0xE3, 0xD9, 0xD3);
	cases( twoNegativesConnected ) = Set(0xF3, 0xAF, 0x3F, 0x77, 0xFC, 0xF5, 0xFA, 0xEE, 0x5F, 0xCF, 0xDD, 0xBB);
	cases( threeNegativesUnconnected ) = Set(158, 182, 121, 107, 233, 151, 214, 109);
	cases( twoNegativesOverTwoEdges ) = Set(0xF9, 0xF6, 0xDE, 0xEB, 0x7B, 0xD7, 0x7D, 0xED, 0xBE, 0xB7, 0x6F, 0x9F);
	cases( twoNegativesOverThreeEdges ) = Set(0x7E, 0xBD, 0xDB, 0xE7);
	cases( oneNegative ) = Set(0xDF, 0x7F, 0xEF, 0xFB, 0xF7, 0xBF, 0xFE, 0xFD);
	cases( allPositive ) = Set(0xFF);
	
	val lookup = {
	for(i <- 0 until 256) yield {
	var id = broken
	for((name,c) <- cases){
	if(c contains i)
	id = name
	}
	id
	}
	}
	
	def main(args:Array[String]){
		println(lookup)
	}
}

